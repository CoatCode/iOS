//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 10 storyboards.
  struct storyboard {
    /// Storyboard `Favorites`.
    static let favorites = _R.storyboard.favorites()
    /// Storyboard `Feed`.
    static let feed = _R.storyboard.feed()
    /// Storyboard `Intro`.
    static let intro = _R.storyboard.intro()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `PostDetail`.
    static let postDetail = _R.storyboard.postDetail()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Search`.
    static let search = _R.storyboard.search()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `Store`.
    static let store = _R.storyboard.store()
    /// Storyboard `Writing`.
    static let writing = _R.storyboard.writing()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Favorites", bundle: ...)`
    static func favorites(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.favorites)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Feed", bundle: ...)`
    static func feed(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.feed)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Intro", bundle: ...)`
    static func intro(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.intro)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "PostDetail", bundle: ...)`
    static func postDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.postDetail)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Search", bundle: ...)`
    static func search(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.search)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Store", bundle: ...)`
    static func store(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.store)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Writing", bundle: ...)`
    static func writing(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.writing)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `Signature`.
    static let signature = Rswift.ColorResource(bundle: R.hostingBundle, name: "Signature")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Signature", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func signature(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.signature, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `MontserratSubrayada-Regular.ttf`.
    static let montserratSubrayadaRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "MontserratSubrayada-Regular", pathExtension: "ttf")

    /// `bundle.url(forResource: "MontserratSubrayada-Regular", withExtension: "ttf")`
    static func montserratSubrayadaRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratSubrayadaRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `MontserratSubrayada-Regular`.
    static let montserratSubrayadaRegular = Rswift.FontResource(fontName: "MontserratSubrayada-Regular")

    /// `UIFont(name: "MontserratSubrayada-Regular", size: ...)`
    static func montserratSubrayadaRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratSubrayadaRegular, size: size)
    }

    static func validate() throws {
      if R.font.montserratSubrayadaRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'MontserratSubrayada-Regular' could not be loaded, is 'MontserratSubrayada-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 20 images.
  struct image {
    /// Image `BT_Black`.
    static let bt_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "BT_Black")
    /// Image `BT_Cancel`.
    static let bt_Cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "BT_Cancel")
    /// Image `BT_LeftArrow`.
    static let bt_LeftArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "BT_LeftArrow")
    /// Image `BT_White`.
    static let bt_White = Rswift.ImageResource(bundle: R.hostingBundle, name: "BT_White")
    /// Image `Background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "Background")
    /// Image `Comment_Icon`.
    static let comment_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Comment_Icon")
    /// Image `Default_Profile`.
    static let default_Profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "Default_Profile")
    /// Image `Favorites_Icon`.
    static let favorites_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Favorites_Icon")
    /// Image `Feed_Icon`.
    static let feed_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Feed_Icon")
    /// Image `Like_Icon`.
    static let like_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Like_Icon")
    /// Image `More_Icon`.
    static let more_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "More_Icon")
    /// Image `Plane_Icon`.
    static let plane_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Plane_Icon")
    /// Image `Settings_Icon`.
    static let settings_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Settings_Icon")
    /// Image `Share_Icon`.
    static let share_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Share_Icon")
    /// Image `SmallMore_Icon`.
    static let smallMore_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SmallMore_Icon")
    /// Image `Store_Icon`.
    static let store_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Store_Icon")
    /// Image `UnLike_Icon`.
    static let unLike_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "UnLike_Icon")
    /// Image `View_Icon`.
    static let view_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "View_Icon")
    /// Image `Writing_Icon`.
    static let writing_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Writing_Icon")
    /// Image `cocoIcon`.
    static let cocoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "cocoIcon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BT_Black", bundle: ..., traitCollection: ...)`
    static func bt_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bt_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BT_Cancel", bundle: ..., traitCollection: ...)`
    static func bt_Cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bt_Cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BT_LeftArrow", bundle: ..., traitCollection: ...)`
    static func bt_LeftArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bt_LeftArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BT_White", bundle: ..., traitCollection: ...)`
    static func bt_White(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bt_White, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Comment_Icon", bundle: ..., traitCollection: ...)`
    static func comment_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.comment_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Default_Profile", bundle: ..., traitCollection: ...)`
    static func default_Profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.default_Profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Favorites_Icon", bundle: ..., traitCollection: ...)`
    static func favorites_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favorites_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Feed_Icon", bundle: ..., traitCollection: ...)`
    static func feed_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feed_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Like_Icon", bundle: ..., traitCollection: ...)`
    static func like_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.like_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "More_Icon", bundle: ..., traitCollection: ...)`
    static func more_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.more_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Plane_Icon", bundle: ..., traitCollection: ...)`
    static func plane_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plane_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Settings_Icon", bundle: ..., traitCollection: ...)`
    static func settings_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Share_Icon", bundle: ..., traitCollection: ...)`
    static func share_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SmallMore_Icon", bundle: ..., traitCollection: ...)`
    static func smallMore_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smallMore_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Store_Icon", bundle: ..., traitCollection: ...)`
    static func store_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.store_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "UnLike_Icon", bundle: ..., traitCollection: ...)`
    static func unLike_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unLike_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "View_Icon", bundle: ..., traitCollection: ...)`
    static func view_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.view_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Writing_Icon", bundle: ..., traitCollection: ...)`
    static func writing_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.writing_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cocoIcon", bundle: ..., traitCollection: ...)`
    static func cocoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cocoIcon, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `CommentCell`.
    static let commentCell = _R.nib._CommentCell()
    /// Nib `CommentPreviewCell`.
    static let commentPreviewCell = _R.nib._CommentPreviewCell()
    /// Nib `FeedCell`.
    static let feedCell = _R.nib._FeedCell()
    /// Nib `PostDetailCell`.
    static let postDetailCell = _R.nib._PostDetailCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CommentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commentCell) instead")
    static func commentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CommentPreviewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commentPreviewCell) instead")
    static func commentPreviewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentPreviewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FeedCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.feedCell) instead")
    static func feedCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.feedCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostDetailCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postDetailCell) instead")
    static func postDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postDetailCell)
    }
    #endif

    static func commentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentCell? {
      return R.nib.commentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentCell
    }

    static func commentPreviewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentPreviewCell? {
      return R.nib.commentPreviewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentPreviewCell
    }

    static func feedCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FeedCell? {
      return R.nib.feedCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeedCell
    }

    static func postDetailCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostDetailCell? {
      return R.nib.postDetailCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostDetailCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CommentCell`.
    static let commentCell: Rswift.ReuseIdentifier<CommentCell> = Rswift.ReuseIdentifier(identifier: "CommentCell")
    /// Reuse identifier `CommentPreviewCell`.
    static let commentPreviewCell: Rswift.ReuseIdentifier<CommentPreviewCell> = Rswift.ReuseIdentifier(identifier: "CommentPreviewCell")
    /// Reuse identifier `FeedCell`.
    static let feedCell: Rswift.ReuseIdentifier<FeedCell> = Rswift.ReuseIdentifier(identifier: "FeedCell")
    /// Reuse identifier `PostDetailCell`.
    static let postDetailCell: Rswift.ReuseIdentifier<PostDetailCell> = Rswift.ReuseIdentifier(identifier: "PostDetailCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CommentCell.validate()
      try _FeedCell.validate()
      try _PostDetailCell.validate()
    }

    struct _CommentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CommentCell

      let bundle = R.hostingBundle
      let identifier = "CommentCell"
      let name = "CommentCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "SmallMore_Icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SmallMore_Icon' is used in nib 'CommentCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Signature", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Signature' is used in storyboard 'CommentCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CommentPreviewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CommentPreviewCell

      let bundle = R.hostingBundle
      let identifier = "CommentPreviewCell"
      let name = "CommentPreviewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommentPreviewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentPreviewCell
      }

      fileprivate init() {}
    }

    struct _FeedCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FeedCell

      let bundle = R.hostingBundle
      let identifier = "FeedCell"
      let name = "FeedCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FeedCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FeedCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Comment_Icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Comment_Icon' is used in nib 'FeedCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "UnLike_Icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'UnLike_Icon' is used in nib 'FeedCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "View_Icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'View_Icon' is used in nib 'FeedCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Signature", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Signature' is used in storyboard 'FeedCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _PostDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PostDetailCell

      let bundle = R.hostingBundle
      let identifier = "PostDetailCell"
      let name = "PostDetailCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostDetailCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Share_Icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Share_Icon' is used in nib 'PostDetailCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "UnLike_Icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'UnLike_Icon' is used in nib 'PostDetailCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Signature", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Signature' is used in storyboard 'PostDetailCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try favorites.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try feed.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try intro.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try postDetail.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profile.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try search.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try settings.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try store.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try writing.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct favorites: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let favoritesViewController = StoryboardViewControllerResource<FavoritesViewController>(identifier: "FavoritesViewController")
      let name = "Favorites"

      func favoritesViewController(_: Void = ()) -> FavoritesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: favoritesViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.favorites().favoritesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'favoritesViewController' could not be loaded from storyboard 'Favorites' as 'FavoritesViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct feed: Rswift.StoryboardResourceType, Rswift.Validatable {
      let allFeedViewController = StoryboardViewControllerResource<AllFeedViewController>(identifier: "AllFeedViewController")
      let bundle = R.hostingBundle
      let feedViewController = StoryboardViewControllerResource<FeedViewController>(identifier: "FeedViewController")
      let followFeedViewController = StoryboardViewControllerResource<FollowFeedViewController>(identifier: "FollowFeedViewController")
      let name = "Feed"
      let popularFeedViewController = StoryboardViewControllerResource<PopularFeedViewController>(identifier: "PopularFeedViewController")

      func allFeedViewController(_: Void = ()) -> AllFeedViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: allFeedViewController)
      }

      func feedViewController(_: Void = ()) -> FeedViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: feedViewController)
      }

      func followFeedViewController(_: Void = ()) -> FollowFeedViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: followFeedViewController)
      }

      func popularFeedViewController(_: Void = ()) -> PopularFeedViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popularFeedViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.feed().allFeedViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'allFeedViewController' could not be loaded from storyboard 'Feed' as 'AllFeedViewController'.") }
        if _R.storyboard.feed().feedViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'feedViewController' could not be loaded from storyboard 'Feed' as 'FeedViewController'.") }
        if _R.storyboard.feed().followFeedViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'followFeedViewController' could not be loaded from storyboard 'Feed' as 'FollowFeedViewController'.") }
        if _R.storyboard.feed().popularFeedViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popularFeedViewController' could not be loaded from storyboard 'Feed' as 'PopularFeedViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct intro: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = IntroViewController

      let bundle = R.hostingBundle
      let createProfileViewController = StoryboardViewControllerResource<CreateProfileViewController>(identifier: "CreateProfileViewController")
      let introViewController = StoryboardViewControllerResource<IntroViewController>(identifier: "IntroViewController")
      let name = "Intro"
      let signInViewController = StoryboardViewControllerResource<SignInViewController>(identifier: "SignInViewController")
      let signUpViewController = StoryboardViewControllerResource<SignUpViewController>(identifier: "SignUpViewController")
      let socialLoginViewController = StoryboardViewControllerResource<SocialLoginViewController>(identifier: "SocialLoginViewController")

      func createProfileViewController(_: Void = ()) -> CreateProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createProfileViewController)
      }

      func introViewController(_: Void = ()) -> IntroViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: introViewController)
      }

      func signInViewController(_: Void = ()) -> SignInViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signInViewController)
      }

      func signUpViewController(_: Void = ()) -> SignUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpViewController)
      }

      func socialLoginViewController(_: Void = ()) -> SocialLoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: socialLoginViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "BT_Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BT_Black' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BT_Cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BT_Cancel' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BT_White", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BT_White' is used in storyboard 'Intro', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Background' is used in storyboard 'Intro', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.intro().createProfileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createProfileViewController' could not be loaded from storyboard 'Intro' as 'CreateProfileViewController'.") }
        if _R.storyboard.intro().introViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'introViewController' could not be loaded from storyboard 'Intro' as 'IntroViewController'.") }
        if _R.storyboard.intro().signInViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signInViewController' could not be loaded from storyboard 'Intro' as 'SignInViewController'.") }
        if _R.storyboard.intro().signUpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpViewController' could not be loaded from storyboard 'Intro' as 'SignUpViewController'.") }
        if _R.storyboard.intro().socialLoginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'socialLoginViewController' could not be loaded from storyboard 'Intro' as 'SocialLoginViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct postDetail: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PostDetail"
      let postDetailViewController = StoryboardViewControllerResource<PostDetailViewController>(identifier: "PostDetailViewController")

      func postDetailViewController(_: Void = ()) -> PostDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: postDetailViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Plane_Icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Plane_Icon' is used in storyboard 'PostDetail', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.postDetail().postDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'postDetailViewController' could not be loaded from storyboard 'PostDetail' as 'PostDetailViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profile: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Profile"
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewController")

      func profileViewController(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.profile().profileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'Profile' as 'ProfileViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct search: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Search"
      let searchViewController = StoryboardViewControllerResource<SearchViewController>(identifier: "SearchViewController")

      func searchViewController(_: Void = ()) -> SearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.search().searchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchViewController' could not be loaded from storyboard 'Search' as 'SearchViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct settings: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Settings"
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")

      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.settings().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Settings' as 'SettingsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct store: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Store"
      let storeViewController = StoryboardViewControllerResource<StoreViewController>(identifier: "StoreViewController")

      func storeViewController(_: Void = ()) -> StoreViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storeViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.store().storeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storeViewController' could not be loaded from storyboard 'Store' as 'StoreViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct writing: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Writing"
      let writingViewController = StoryboardViewControllerResource<WritingViewController>(identifier: "WritingViewController")

      func writingViewController(_: Void = ()) -> WritingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: writingViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.writing().writingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'writingViewController' could not be loaded from storyboard 'Writing' as 'WritingViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
